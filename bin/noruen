#!/usr/bin/env ruby
require 'umbra'
require 'umbra/label'
require 'umbra/tabular'
require 'umbra/listbox'
require 'umbra/textbox'
require 'umbra/box'
require 'umbra/button'
require 'umbra/labeledfield'
require 'umbra/messagebox'
require 'bip_mnemonic'
require 'money-tree/support'
require 'money-tree/node'
require 'money-tree/key'
require 'ckb'
require 'rqrcode'

$rpc = CKB::Config.instance.rpc
$private_key = "0x63d86723e08f0f813a36ce6aa123bb2289d90680ae1e99d4de8cdb334553f24d"
$lock_hash = "0xc219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd"
$wallet = CKB::Wallet.new("ckt1qyqywrwdchjyqeysjegpzw38fvandtktdhrs0zaxl4")

class Wallet
  def initialize(seed)
    @master = MoneyTree::Master.new(seed_hex: seed)
  end

  def receiving_node(level)
    @master.node_for_path("m/44'/309'/0'/0/#{level}")
  end

  def change_node(level)
    @master.node_for_path("m/44'/309'/0'/1/#{level}")
  end

  def receiving_script(level)
    node = receiving_node(level)
    CKB::Types::Script.new(
      code_hash: CKB::Types::Script::SECP256K1_BLAKE160_SIGHASH_ALL_TYPE_HASH,
      args: "0x#{node.public_key.key[0, 40]}",
      hash_type: "type"
    )
  end

  def change_script(level)
    node = change_node(level)
    CKB::Types::Script.new(
      code_hash: CKB::Types::Script::SECP256K1_BLAKE160_SIGHASH_ALL_TYPE_HASH,
      args: "0x#{node.public_key.key[0, 40]}",
      hash_type: "type"
    )
  end

  def index_lock_hashes(level = 10)
    (0..level).map do |l|
      self.receiving_script(l).compute_hash.to_hex
    end +
    (0..level).map do |l|
      self.change_script(l).compute_hash.to_hex
    end
  end

  def pick_change_address
    @receiving_address ||= CKB::Address.generate(change_script((0..10).to_a.sample))
  end
end

class String
  def fmt_ckb_capacity
    r = self.to_i(16).to_s
    "#{r[0..-8].reverse.scan(/\d{3}|.+/).join(",").reverse}.#{r[-8..-1]}"
  end

  def fmt_timestamp
    Time.at(self.to_i(16) / 1000).strftime("%Y-%m-%d %H:%M")
  end
end

def load_wallet
  folder = File.expand_path("~/.noruen")
  if File.directory?(folder)
    i = Dir.entries(folder).map(&:to_i).max
    wallet_file = File.join(folder, "#{i}.wallet")
    if File.exist?(wallet_file) && (seed = File.read(wallet_file)) != nil
      @wallet = Wallet.new(seed)
    end
  end
end

def save_wallet(seed)
  folder = File.expand_path("~/.noruen")
  Dir.mkdir(folder) unless File.directory?(folder)
  i = Dir.entries(folder).map(&:to_i).max
  File.write(File.join(folder, "#{i + 1}.wallet"), seed)
end

def create_or_import_wallet
  mb_new_or_import = MessageBox.new width: 100, height: 5, buttons: ["New", "Import"], title: "Create new wallet or import by mnemonic?"
  if mb_new_or_import.run == 0
    mb_new = MessageBox.new width: 100, height: 10, title: "Your new wallet seed has been generated" do
      text ["Please ensure you write down the words in the same numerical order:", BipMnemonic.to_mnemonic({})]
    end
    if mb_new.run == 0
      import_wallet
    end
  else
    import_wallet
  end
end

def import_wallet
  f_seed = nil
  mb = MessageBox.new width: 100, height: 10, title: "Import" do
    add Label.new text: "Input your wallet seed:", row: 2, col: 2
    f_seed = Field.new name: "import_seed", row: 3, col: 2, width: 90
    add f_seed
  end

  if mb.run == 0 && f_seed.text && f_seed.text.strip.size > 10
    seed = BipMnemonic.to_seed(mnemonic: f_seed.text.strip)
    save_wallet(seed)
    @wallet = Wallet.new(seed)
  end
end

def startup
  require 'logger'
  require 'date'

  path = File.join(ENV["LOGDIR"] || "./" , "noruen.log")
  file = File.open(path, File::WRONLY|File::TRUNC|File::CREAT)
  $log = Logger.new(path)
  $log.level = Logger::DEBUG
  today = Date.today
  $log.info "Started noruen on #{today}"
  FFI::NCurses.init_pair(10,  FFI::NCurses::BLACK,   FFI::NCurses::GREEN) # statusline
end

def statusline win, str, col = 0
  win.printstring( FFI::NCurses.LINES-1, col, str, 10)
end

MENU_ROW = 2
MENU_COL = 0
MENU_WIDTH = 15
MENU_HEIGHT = 11

def draw_wallet_view(form)
  l = Label.new text: "Capacity: #{$rpc.get_capacity_by_lock_hash($lock_hash)[:capacity].fmt_ckb_capacity} CKB"

  t = Tabular.new do |t|
    t.headings = 'Date',  'Type', 'Amount', 'Status', ''
    $rpc.get_transactions_by_lock_hash($lock_hash, 0, 50, true).each do |r|
      timestamp = $rpc.get_header_by_number(r[:created_by][:block_number])[:timestamp]
      capacity = $rpc.get_transaction(r[:created_by][:tx_hash])[:transaction][:outputs][r[:created_by][:index].to_i(16)][:capacity]
      t.add_row [timestamp.fmt_timestamp, "Receive", "#{capacity.fmt_ckb_capacity} CKB", "Success", ""]

      if consumed_by = r[:consumed_by]
        timestamp = $rpc.get_header_by_number(consumed_by[:block_number])[:timestamp]
        out_point = $rpc.get_transaction(consumed_by[:tx_hash])[:transaction][:inputs][consumed_by[:index].to_i(16)]
        capacity = $rpc.get_transaction(out_point[:previous_output][:tx_hash])[:transaction][:outputs][out_point[:previous_output][:index].to_i(16)][:capacity]
        t.add_row [timestamp.fmt_timestamp, "Send", "#{capacity.fmt_ckb_capacity} CKB", "Success", ""]
      end
    end
  end
  lb = Listbox.new list: t.render

  view = Box.new title: 'Wallet', row: MENU_ROW, col: MENU_COL + MENU_WIDTH + 1, width: FFI::NCurses.COLS - MENU_WIDTH - 1, height: FFI::NCurses.LINES - MENU_ROW - 1
  view.stack l, lb
  form.add_widget view, l, lb
  [view, l, lb]
end

def draw_send_view(form)
  l_address = Label.new text: "Address:"
  f_address = Field.new name: "send_address", datatype: "String", color_pair: CP_CYAN, attr: REVERSE, width: 60
  l_capacity = Label.new text: "Capacity:"
  f_capacity = Field.new name: "send_capacity", datatype: "Float", color_pair: CP_CYAN, attr: REVERSE, width: 60
  btn_send = Button.new text: 'Send'

  view = Box.new title: 'Send', row: MENU_ROW, col: MENU_COL + MENU_WIDTH + 1, width: FFI::NCurses.COLS - MENU_WIDTH - 1, height: 15
  view.stack l_address, f_address, l_capacity, f_capacity, btn_send
  form.add_widget view, l_address, f_address, l_capacity, f_capacity, btn_send

  address = ""
  capacity = 0.0

  f_address.bind_event(:CHANGE) do |f|
    address = f.getvalue
  end

  f_capacity.bind_event(:CHANGE) do |f|
    capacity = f.getvalue
  end

  btn_send.command do
    if address.strip != "" && capacity > 0.01
      if confirm "Send #{capacity.to_s} CKB to #{address} ?"

      end
    end
  end

  [view, l_address, f_address, l_capacity, f_capacity, btn_send]
end

def draw_receive_view(form)
  lf_address = Label.new text: "Address: #{@wallet.pick_change_address}"
  view = Box.new title: 'Receive', row: MENU_ROW, col: MENU_COL + MENU_WIDTH + 1, width: FFI::NCurses.COLS - MENU_WIDTH - 1, height: FFI::NCurses.LINES - MENU_ROW - 1
  view.stack lf_address
  form.add_widget view, lf_address
  [view, lf_address]
end

def draw_qr_code(win)
  qr = RQRCode::QRCode.new(@wallet.pick_change_address, size: 3, level: :l)

  qr.qrcode.modules.each_with_index do |row, ri|
    row.each_with_index do |col, ci|
      win.printstring(MENU_ROW + 5 + ri, MENU_COL + MENU_WIDTH + 5 + ci * 2, '▓▓', col ? 1 : 0)
    end
  end
end

def toogle_view(win, views, i)
  # clear
  (0..FFI::NCurses.LINES - MENU_ROW - 2).each do |i|
    win.printstring(MENU_ROW + i, MENU_COL + MENU_WIDTH + 1, " " * (FFI::NCurses.COLS - MENU_WIDTH - 1))
  end
  views.each_with_index do |view, index|
    view.each{|w| w.visible = i == index}
  end
end

def main_view(form, win)
  box_menu = Box.new row: MENU_ROW, col: MENU_COL, width: MENU_WIDTH, height: MENU_HEIGHT
  btn_wallet = Button.new(text: 'Wallets', height: 1)
  btn_send = Button.new(text: 'Send', height: 1)
  btn_receive = Button.new(text: 'Receive', height: 1)
  btn_history = Button.new(text: 'History', height: 1)
  btn_udt = Button.new(text: 'UDT', height: 1)
  box_menu.stack btn_wallet, btn_send, btn_receive, btn_history, btn_udt
  form.add_widget box_menu, btn_wallet, btn_send, btn_receive, btn_history, btn_udt

  views = [draw_wallet_view(form), draw_send_view(form), draw_receive_view(form)]
  toogle_view(win, views, 0)

  btn_wallet.command do
    toogle_view(win, views, 0)
  end

  btn_send.command do
    toogle_view(win, views, 1)
  end

  btn_receive.command do
    toogle_view(win, views, 2)
    draw_qr_code(win)
  end

  form.pack
  form.repaint
  win.wrefresh

  while (ch = win.getkey) != FFI::NCurses::KEY_CTRL_Q
    next if ch == -1
    form.handle_key ch
    win.wrefresh
  end
end

begin
  include Umbra
  init_curses
  startup
  win = Window.new
  statusline(win, " "*(win.width-0), 0)
  statusline(win, "Press Ctrl-q to quit", 20)
  title = Label.new(text: 'A "native" CKB wallet in 999 lines of code', row: 0, col: 0, width: FFI::NCurses.COLS-1, justify: :center, color_pair: 0)

  form = Form.new win
  form.add_widget title

  if load_wallet
    main_view(form, win)
  else
    loop do
      break if create_or_import_wallet
    end
    main_view(form, win)
  end

rescue Object => e
  @window.destroy if @window
  FFI::NCurses.endwin
  puts e
  puts e.backtrace.join("\n")
ensure
  @window.destroy if @window
  FFI::NCurses.endwin
  puts
end